import matplotlib.pyplot as plt
import numpy as np
import math


def ievades_validacija(pazinojums, nosacijums, kludas_pazinojums):
    while True:
        try:
            vertiba = float(input(pazinojums))
            if nosacijums(vertiba):
                return vertiba
            else:
                print(kludas_pazinojums)
        except ValueError:
            print("Nederiga ievade. Ludzu, ievadiet derigu skaitlisko vertibu.")


def augstaka_cena():
    while True:
        try:
            maxx = float(input("Ievadiet funckijas lielako cenu: "))
        except ValueError:
            print("Ievadita nepareiza vertiba")
        else:
            if maxx <= 0:
                print("Augstaka cena nevar but vienada vai mazaka par 0")
                continue
            else:
                return maxx


def salidzinasana(t, v):
    if t < 0 or t > v:
        print("Ievadita vertiba atrodas arpus grafika robezam")
        return 1
    elif t == 0:
        print("Cena nevar but vienada ar 0")
        return 1
    else:
        return 0


def nules_parbaude(v, t, a, b, c):
    match t:
        case 1:
            if a*v+b == 0:
                print("Ar doto vertibu nav iespejams aprekinat elastibu")
                return 1
            else:
                return 0
        case 2:
            if a * v ** 2 + b * v + c == 0:
                print("Ar doto vertibu nav iespejams aprekinat elastibu")
                return 1
            else:
                return 0
        case 3:
            if a * math.e ** (v * b) + c == 0:
                print("Ar doto vertibu nav iespejams aprekinat elastibu")
                return 1
            else:
                return 0
        case 4:
            if a * pow(v, 0.5) + b == 0:
                print("Ar doto vertibu nav iespejams aprekinat elastibu")
                return 1
            else:
                return 0


def cenas(m2, t, a, b, c):
    while True:
        while True:
            c2 = ievades_validacija("Lai aprekinatu elastibu, ievadiet pirmo cenu: ",
                                    lambda q: q == float,
                                    "Ievadiet derīgu skaitlisko vērtību!")
            if salidzinasana(c2, m2) == 0 and nules_parbaude(c2, t, a, b, c) == 0:
                break
        while True:
            c3 = ievades_validacija("Ievadiet otro cenu: ",
                                    lambda q: q == float,
                                    "Ievadiet derīgu skaitlisko vērtību!")
            if salidzinasana(c3, m2) == 0 and nules_parbaude(c3, t, a, b, c) == 0:
                break

        if c2 > c3:
            c2, c3 = c3, c2
            break
        elif c2 == c3:
            print("Ievaditas vertibas ir vienadas")
        else:
            break
    return c2, c3


def elastiba(v0, v1, q0, q1):
    el = ((q1 - q0) / q0) / ((v1 - v0) / v0)
    if abs(el) == 1:
        print("Elastiba = |1|, pieprasijums ir vienadots")
    elif abs(el) < 1:
        print("Elastiba =", round(abs(el)), ", pieprasijums ir neelastigs")
    else:
        print("Elastiba =", round(abs(el)), ", pieprasijums ir elastigs")
    return None


def elastibas_aprekins():
    a, b, c = 0, 0, 0
    x = np.linspace(0, augstaka_cena(), 100)
    match ievades_validacija("Izveleties velamo funkciju: \n 1. lineara \n "
                             "2. kvadratiska \n 3. eksponente \n 4. kvadratsakne(radikals)",
                             lambda q: q in [1, 2, 3, 4],
                             "Ievadiet derīgu opciju(1, 2, 3 vai 4"):
        case 1:
            print("Jusu izveleta funkcija: ax + b")
            a = ievades_validacija("Ievadiet a: ",
                                   lambda q: q == float,
                                   "")
            b = ievades_validacija("Ievadiet b: ",
                                   lambda q: q == float,
                                   "")
            y = a * x + b
            c0, c1 = cenas(x[99], 1, a, b, c)
            y0 = a * c0 + b
            y1 = a * c1 + b
            elastiba(c0, c1, y0, y1)

        case 2:
            print("Jusu izveleta funkcija: ax^2 * bx + c")
            a = ievades_validacija("Ievadiet a: ",
                                   lambda q: q == float,
                                   "")
            b = ievades_validacija("Ievadiet b: ",
                                   lambda q: q == float,
                                   "")
            c = ievades_validacija("Ievadiet c: ",
                                   lambda q: q == float,
                                   "")
            y = a * x ** 2 + b * x + c
            c0, c1 = cenas(x[99], 2, a, b, c)
            y0 = a * c0 ** 2 + b * x + c
            y1 = a * c1 ** 2 + b * x + c
            elastiba(c0, c1, y0, y1)

        case 3:
            print("Jusu izveleta funkcija: ae^(bx) + c")
            a = ievades_validacija("Ievadiet a: ",
                                   lambda q: q == float,
                                   "")
            b = ievades_validacija("Ievadiet b: ",
                                   lambda q: q == float,
                                   "")
            c = ievades_validacija("Ievadiet c: ",
                                   lambda q: q == float,
                                   "")
            y = a * math.e ** (x * b) + c
            plt.ylim(0, 100)
            c0, c1 = cenas(x[99], 3, a, b, c)
            y0 = a * math.e ** (c0 * b) + c
            y1 = a * math.e ** (c1 * b) + c
            elastiba(c0, c1, y0, y1)

        case 4:
            print("Jusu izveleta fukcija ir: a√x + b")
            a = ievades_validacija("Ievadiet a: ",
                                   lambda q: q == float,
                                   "")
            b = ievades_validacija("Ievadiet b: ",
                                   lambda q: q == float,
                                   "")
            y = a * pow(x, 0.5) + b
            c0, c1 = cenas(x[99], 4, a, b, c)
            y0 = a * pow(c0, 0.5) + b
            y1 = a * pow(c1, 0.5) + b
            elastiba(c0, c1, y0, y1)

    # noinspection PyUnboundLocalVariable
    plt.plot(x, y)
    plt.xlabel('x, Cena')
    plt.ylabel('y, Daudzums')
    plt.grid(True)
    plt.show()
